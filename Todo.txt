
test
	check mouse ctl/alt/shif, left cick, drag,  ...  in cursor mode correspond to mouse mode

text interface
	colors
	
	cursor positioning when moving objects
	display when object is outside viewport
	mouse selection area
	
	vim script
		open file under cursor

actions
	add stencils dynamically
	
	copy between instances
		save snapshot of selected object in temporary file
		put name of temporary file in clipboard
	
	presentation mode
		accept a directory as input
			show slides based on sort order or order.slide.txt
		allow saving of modified slides
		allow deletion and insertion of slides
			what if the slides are under git control?
		extra window to show slide order and modify it (and the slides maybe)
		extra slide menu (through actions)
			open
			save
			insert
			delete

objects
	any orientation text
		diagonal text, Ian's request
		options to keep it to diagonals or horizontal, vertical
		use as base for angled arrow
	
	angle arrow dialog does nothing
	
	merge arrows and split-arrow
	
	more than one resize handle

display
	panning
	
	scrollbars
	
	generate "nice looking" graph
		- interface to ditaa
		- svgbob
		- save as pdf
		- use ANSI stencil

architecture
	handle unicode (remove write_file)
	
	handle multiple versions with one of the following mechanisms:
		- git/embed git::PurePerl 
		- use PAR 
		- multiple directories

optimization 
	selecting an object takes long time when there are many objects
		is stripes coordinates used rather than object to filter out?
			need limits for arrow types
	
	update_display called everytime mouse changes grid cell, even if nothing close to grid cell
		optimize by first looking if there will be changes, IE within an object, even if not on object
		if object has changed, compute changed window, extent of all objects that have been changed plus their extent ....
		we may still get an event where everything needs to be redrawn, IE: other window overlapped Asciios window 
	
		#App::Asciio::stripes::editable_arrow2=HASH(0x559c42d63638) (no extents)
		#App::Asciio::stripes::angled_arrow=HASH(0x559c42e0bf80) (no extents)
		#App::Asciio::stripes::if_box=HASH(0x559c42ccd3f8) (no extents)
		#App::Asciio::stripes::process_box=HASH(0x559c42cd3dc0) (no extents)
		App::Asciio::stripes::rhombus=HASH(0x559c42d79c08) (no extents)
	
	Zbuffer/bit masks
		when rendering stripes, keep list of objects per cell
			IE: quadrant size is 1 cell
	
	Connection optimizer
		- no optimization needed for unchanged objects
			- asciio must keep track of changed objects
				- but we must not be intruisive
					- md5 ??
		
		auto connection using A* module http://search.cpan.org/~acdalton/AI-Pathfinding-AStar-0.10/
			- orthogonal or orthogonal and diagonal arrows
			- add get_cost_map to base Asciio
				- get_cost_map can also be implemented in draw in sub classes
			- connectors and elements could have different costs
		
		http://www-cs-students.stanford.edu/~amitp/gameprog.html
		Path finding, see ISBN 2550-0124977820
		
		connected, non auto-connect, arrows loose their connection if the connectee is resized
			=> this is because resize doesn't keep the connection. The 
				canonizer reconnects elements but non auto-connect objects are not handled by the canonizer
				
				=> make canonizer re connect to the same place instead for changing the connector
		
		optimize current arrow (A* pathfinder)
	
	do_stack serialization
		=> diff + compress
			# tests done
			must have a reverse diff that can patch both ways or it's not worth it
		let git do the work ?
		
		put ID to objects in ELEMENTS rather than serialized elements
			large test shows time 0.2s vs 0.002s
			
			objects versions can be kept in memory or serialized separately if they
			take too much space
		
		limit undo stack size

