#!/usr/bin/env perl

use strict;
use warnings;

use App::Asciio::Text::Asciio ;

use Module::Util qw(find_installed) ;
use File::Basename ;

#-----------------------------------------------------------------------------

my $asciio = App::Asciio::Text->new(50, 25) ;

my ($command_line_switch_parse_ok, $command_line_parse_message, $asciio_config)
	= $asciio->ParseSwitches([@ARGV], 0) ;

die "Error: '$command_line_parse_message'!" unless $command_line_switch_parse_ok ;

my $setup_paths = [] ;

if(@{$asciio_config->{SETUP_PATHS}})
	{
	$setup_paths = $asciio_config->{SETUP_PATHS} ;
	}
else
	{
	my ($basename, $path, $ext) = File::Basename::fileparse(find_installed('App::Asciio'), ('\..*')) ;
	my $setup_path = $path . $basename . '/setup/' ;
	
	$setup_paths = 
		[
		$setup_path . 'setup.ini', 
		$setup_path . 'Text/setup.ini', 
		$ENV{HOME} . '/.config/Asciio/Asciio.ini',
		] ;
	}

my $title = $asciio_config->{TARGETS}[0] ;
$asciio->run_actions_by_name(['Open', $title]) if defined $title ;

# 'open' deserializes an asciio object with it's attributes, if the file
# was saved by a different asciio object (GUI/TUI), the attributes in
# the serialized object will not fit, run setup after 'open'
$asciio->setup($setup_paths) ;

$asciio->set_title($title) if defined $title ;

STDERR->autoflush(1) ;

# open my $fh, ">&=", 5 or die "can't open fh 5: $!\n" ; 
# $fh->autoflush(1) ;
# $asciio->{ACTION_VERBOSE} = sub { $counter++ ; print $fh "$counter - $_[0]\n" ; } ;

# $asciio->{ACTION_VERBOSE} = sub { print STDERR "\e[?25l\e[H" ."$_[0]\n" ; } ;
# $asciio->{ACTION_VERBOSE} = sub { ; } ;

my ($character_width, $character_height) = $asciio->get_character_size() ;

$asciio->set_modified_state(0) ;

if(defined $asciio_config->{SCRIPT})
	{
	require App::Asciio::Scripting ;
	
	App::Asciio::Scripting::run_external_script($asciio, $asciio_config->{SCRIPT}) ;
	}

#--------------------------------------------------------------------------

use Term::ReadKey ;
use Term::TermKey qw(FLAG_UTF8 RES_EOF FORMAT_VIM FORMAT_LONGMOD MOUSE_PRESS MOUSE_DRAG MOUSE_RELEASE) ;

my $tk = Term::TermKey->new(\*STDIN) ;
$asciio->{CACHE}{TK} = $tk ;
 
# ensure perl and libtermkey agree on Unicode handling
binmode( STDOUT, ":encoding(UTF-8)" ) if $tk->get_flags & FLAG_UTF8; 

$asciio->update_display() ;

print "\e[?1003h" ; # get mouse events

use Time::HiRes qw(gettimeofday) ;

my $last_mouse_update = gettimeofday ;

while (1)
	{
	$tk->waitkey(my $key);
	 
	if ( $key->type_is_mouse )
		{
		my $float_seconds = gettimeofday;
		
		if($float_seconds - $last_mouse_update > 0.05)
			{
			$last_mouse_update = $float_seconds ;
			
			my ($ev, $button, $line, $col) = $tk->interpret_mouse( $key );
			my $modifiers = '' ;
			
			$modifiers .= $key->modifier_ctrl ? 'C' : '0' ;
			$modifiers .= $key->modifier_alt ? 'A' : '0' ;
			$modifiers .= '0' ; # shift blocks mouse events
			
			$asciio->motion_dragging_event($modifiers, $button, $col - 1, $line - 1) if ($ev == MOUSE_DRAG) ;
			$asciio->button_press_event($modifiers, $button, $col - 1, $line - 1)    if ($ev == MOUSE_PRESS) ;
			
			# mmouse release or moved without a key pressed ?
			if ($ev == MOUSE_RELEASE)
			{
				$asciio->motion_notify_event($modifiers, $button, $col - 1, $line - 1) ;
				$asciio->update_display() if $asciio->{DRAGGING} ;
			}
			
			# $asciio->button_scroll_event($modifiers, $button, $col - 1, $line - 1) if ($ev == MOUSE_???) ;
			}
		}
	else
		{
		# my $modifier = '' ;

		# $modifier .= $key->modifier_ctrl ? 'C' : '0' ;
		# $modifier .= '0' ; # shift blocks mouse events
		# $modifier .= $key->modifier_alt ? 'A' : '0' ;

		my $key_name = $tk->format_key($key, 0) ;
		$asciio->key_press_event($key_name, '') ;
		}
	}

