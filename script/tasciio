#!/usr/bin/env perl

package main ;

use strict;
use warnings;

use App::Asciio::Text::Asciio ;

use Module::Util qw(find_installed) ;
use File::Basename ;

#-----------------------------------------------------------------------------

my $asciio = App::Asciio::Text->new(50, 25) ;

my ($command_line_switch_parse_ok, $command_line_parse_message, $asciio_config)
	= $asciio->ParseSwitches([@ARGV], 0) ;

die "Error: '$command_line_parse_message'!" unless $command_line_switch_parse_ok ;

my $setup_paths = [] ;

if(@{$asciio_config->{SETUP_PATHS}})
	{
	$setup_paths = $asciio_config->{SETUP_PATHS} ;
	}
else
	{
	my ($basename, $path, $ext) = File::Basename::fileparse(find_installed('App::Asciio'), ('\..*')) ;
	my $setup_path = $path . $basename . '/setup/' ;
	
	$setup_paths = 
		[
		$setup_path . 'setup.ini', 
		$setup_path . 'Text/setup.ini', 
		$ENV{HOME} . '/.config/Asciio/Asciio.ini',
		] ;
	}

$asciio->setup($setup_paths) ;

my ($character_width, $character_height) = $asciio->get_character_size() ;

if(defined $asciio_config->{TARGETS}[0])
	{
	$asciio->run_actions_by_name(['Open', $asciio_config->{TARGETS}[0]]) ;
	}
	
$asciio->set_modified_state(0) ;
$asciio->run_script($asciio_config->{SCRIPT}) ;
	
#--------------------------------------------------------------------------

# use Time::HiRes ;

use Term::ReadKey;
use Term::TermKey qw( FLAG_UTF8 RES_EOF FORMAT_VIM FORMAT_LONGMOD);
 
my $tk = Term::TermKey->new(\*STDIN);
 
# ensure perl and libtermkey agree on Unicode handling
binmode( STDOUT, ":encoding(UTF-8)" ) if $tk->get_flags & FLAG_UTF8; 

print "\e[2J\e[H" ;

while (1)
	{
	$tk->waitkey(my $key);
	 
	my $modifiers  = $key->modifier_ctrl  ? 'C' : 0 ;
	   $modifiers .= $key->modifier_alt   ? 'A' : 0 ;
	   $modifiers .= $key->modifier_shift ? 'S' : 0 ;
	
	my $key_name = $tk->format_key($key, 0) ;
	
	$asciio->key_press_event($key_name, $modifiers) ;
	
	do { ReadMode('normal') ; exit ; } if $key_name eq 'q' ;
	}


